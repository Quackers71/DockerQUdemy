https://www.udemy.com/docker-mastery/

https://github.com/bretfisher/udemy-docker-mastery

https://github.com/Quackers71/DockerQUdemy
https://try.github.io/

https://dockermasterychat.herokuapp.com/
https://dockermastery.slack.com/

https://www.youtube.com/c/BretFisherITPro

# The Big FAQ
# Section 1, Lecture 7
https://www.udemy.com/docker-mastery/learn/v4/t/lecture/10091380?start=0

Docker Editions @ https://store.docker.com/

CE vs. EE, Stable vs. Edge

CE = Community Edition
Edge = Beta Versions

https://store.docker.com/editions/community/docker-ce-desktop-windows
https://docs.docker.com/toolbox/overview/#whats-in-the-box

C:\Users\Rob\.docker\machine\machines\default\default\Logs

# Installing the latest Docker on Linux...

https://get.docker.com/
curl -fsSL get.docker.com -o get-docker.sh
sh get-docker.sh
sudo usermod -aG docker ubuntu # to run docker commands as sudo

# next install docker machine
https://docs.docker.com/machine/install-machine/

$ base=https://github.com/docker/machine/releases/download/v0.14.0 &&
  curl -L $base/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine &&
  sudo install /tmp/docker-machine /usr/local/bin/docker-machine

docker-machine version # to test docker machine has install correctly

# Alternatively for docker machine download via Github
https://github.com/docker/machine/releases

curl -L https://github.com/docker/machine/releases/download/v0.15.0/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine &&
chmod +x /tmp/docker-machine &&
sudo cp /tmp/docker-machine /usr/local/bin/docker-machine


# last install docker compose
https://docs.docker.com/compose/install/#install-compose

sudo curl -L "https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

# Alternatively for docker compose download via Github
https://github.com/docker/compose/releases

sudo -i
curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose

docker-compose version

bretfisher.com/shell/

## Section: 3

# 19. Starting an Nginx Web Server

docker container run --publish 80:80 --detach nginx
docker container ls
docker container stop b48c

docker container run --publish 80:80 --detach --name webhost nginx
docker container logs webhost
docker container top webhost

docker container rm dee b48 clf

# 21. Just a Process

docker run --name mongo -d mongo
docker top mongo
ps aux | grep mongo

# 23. Assignment: Manage Multiple Containers

docker container run --publish 80:80 --detach --name nginx nginx
docker container run --publish 8080:80 --detach --name apache httpd
docker container run -e MYSQL_RANDOM_ROOT_PASSWORD=yes --publish 3306:3306 --detach --name mysql mysql
docker container ls -a

docker container logs mysql # to obtain the Random Password
# or
docker container logs mysql | grep -i password

# to test
curl localhost      # Nginx
curl localhost:8080 # Apache

docker container stop mysql apache nginx
docker container rm mysql apache nginx

docker image ls

# 25. What's going on in Containers: CLI Process Monitoring

docker container run -d --name nginx nginx
docker container run -d --name mysql -e MYSQL_RANDOM_ROOT_PASSWORD=true mysql

docker container top mysql
docker container top nginx
docker container inspect mysql
docker container inspect nginx

docker container stats

# 26. Getting a Shell inside Containers: No Need for SSH

docker container run -ti --name proxy nginx bash

ubuntu@ip-172-31-27-210:~$ docker container ls -a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                     PORTS                 NAMES
eb58fedf64c9        nginx               "bash"                   48 seconds ago      Exited (0) 6 seconds ago                         proxy
94fe4f89e829        mysql               "docker-entrypoint.s…"   27 minutes ago      Up 26 minutes              3306/tcp, 33060/tcp   mysql
34fa91bcea87        nginx               "nginx -g 'daemon of…"   28 minutes ago      Up 28 minutes              80/tcp                nginx

docker container exec -ti ubuntu bash

docker pull alpine
docker container run -ti alpine sh # use sh as 'bash' is not installed on alpine
# you use 'apk' command on alpine to update packages
apk

ubuntu@ip-172-31-27-210:~$ docker image ls
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
mongo               latest              c1d6c06b5775        3 days ago          381MB
alpine              latest              196d12cf6ab1        12 days ago         4.41MB
ubuntu              latest              cd6d8154f1e1        2 weeks ago         84.1MB
nginx               latest              06144b287844        2 weeks ago         109MB
mysql               latest              6a834f03bd02        2 weeks ago         484MB
httpd               latest              d595a4011ae3        2 weeks ago         178MB

# 27. Docker Networks: Concepts for Private and Public Comms in Containers

docker container run -p 80:80 --name webhost -d nginx

docker container port webhost
docker container inspect --format '{{ .NetworkSettings.IPaddress }}' webhost

# 29. Docker Networks: CLI Management of Virtual Networks

docker container run <stuff> nginx:alpine

docker network ls
docker network create my_app_net # Creates a bridge

docker container run -d --name new_nginx --network my_app_net nginx

docker network inspect my_app_net

 "Containers": {
            "fbe031f040c2d55c183123875ae384430b7f14571de64d93c7a0ebcb8baa2e1c": {
                "Name": "new_nginx",
                "EndpointID": "3a3ce47daf0ccbdbcf55fc5e4cae513a6b70dc12a8aa1786df5404807c7de4be",
                "MacAddress": "02:42:ac:12:00:02",
                "IPv4Address": "172.18.0.2/16",
                "IPv6Address": ""

docker network connect my_app_net webhost

docker container inspect webhost

            "Networks": {
                "bridge": {
                    "IPAMConfig": null,
                    "Links": null,
                    "Aliases": null,
                    "NetworkID": "1bc967fe8c807b96f79ba8265ede264320f6419daf5dda65b16a44cf82c819ab",
                    "EndpointID": "a28f80e1f2edbf079576f1ed75b1ce59ae264b712f57ef2db34e3b816e7840b7",
                    "Gateway": "172.17.0.1",
                    "IPAddress": "172.17.0.2",
                    "IPPrefixLen": 16,
                    "IPv6Gateway": "",
                    "GlobalIPv6Address": "",
                    "GlobalIPv6PrefixLen": 0,
                    "MacAddress": "02:42:ac:11:00:02",
                    "DriverOpts": null
                },
                "my_app_net": {
                    "IPAMConfig": {},
                    "Links": null,
                    "Aliases": [
                        "d9cb19d7609d"
                    ],
                    "NetworkID": "5a71a86b8f9368b242d903844466315b7c37d9d67ceb02479745a3352b4f577e",
                    "EndpointID": "aeaec0ffd88ad6572946abee7d725574e8b4f1a6bf137daa8d8e0b123cc1d970",
                    "Gateway": "172.18.0.1",
                    "IPAddress": "172.18.0.3",
                    "IPPrefixLen": 16,
                    "IPv6Gateway": "",
                    "GlobalIPv6Address": "",
                    "GlobalIPv6PrefixLen": 0,
                    "MacAddress": "02:42:ac:12:00:03",
                    "DriverOpts": null

docker network disconnect my_app_net webhost

# 30. Docker Networks: DNS and how Containers Find Each Other

ubuntu@ip-172-31-27-210:~$ docker container exec -ti my_nginx ping new_nginx
PING new_nginx (172.18.0.2): 56 data bytes
64 bytes from 172.18.0.2: seq=0 ttl=64 time=0.105 ms
64 bytes from 172.18.0.2: seq=1 ttl=64 time=0.110 ms

ubuntu@ip-172-31-27-210:~$ docker container ls
CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                NAMES
1438bb16f762        nginx:alpine        "nginx -g 'daemon of…"   About a minute ago   Up About a minute   80/tcp               my_nginx
e9ee20392aa1        nginx:alpine        "nginx -g 'daemon of…"   3 minutes ago        Up 3 minutes        80/tcp               new_nginx
d9cb19d7609d        nginx               "nginx -g 'daemon of…"   About an hour ago    Up About an hour    0.0.0.0:80->80/tcp   webhost

# 31. Assignment: Using Containers for CLI 2:30 Testing

docker container run --rm -ti centos:7 bash
yum update curl
curl --version

docker container run --rm -ti ubuntu:14.04 bash
apt-get update && apt-get install -y curl
curl --version

# 33. Assignment: DNS Round Robin Test

docker container run -d --net dude --net-alias search elasticsearch:2
ubuntu@ip-172-31-27-210:~$ docker container ls
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES
cf8c29e96362        elasticsearch:2     "/docker-entrypoint.…"   38 seconds ago      Up 37 seconds       9200/tcp, 9300/tcp   heuristic_minsky
5832c15bf1bf        elasticsearch:2     "/docker-entrypoint.…"   53 seconds ago      Up 52 seconds       9200/tcp, 9300/tcp   naughty_nightingale

ubuntu@ip-172-31-27-210:~$ docker container run --rm --net dude alpine nslookup search
nslookup: can't resolve '(null)': Name does not resolve

Name:      search
Address 1: 172.19.0.2 search.dude
Address 2: 172.19.0.3 search.dude

ubuntu@ip-172-31-27-210:~$ docker container run --rm --net dude centos curl -s search:9200
{
  "name" : "Riot Grrl",
  "cluster_name" : "elasticsearch",
  "cluster_uuid" : "Wps17Zd-QyiI1TKeyjj0Tg",
  "version" : {
    "number" : "2.4.6",
    "build_hash" : "5376dca9f70f3abef96a77f4bb22720ace8240fd",
    "build_timestamp" : "2017-07-18T12:17:44Z",
    "build_snapshot" : false,
    "lucene_version" : "5.5.4"
  },
  "tagline" : "You Know, for Search"
}

ubuntu@ip-172-31-27-210:~$ docker container rm -f heuristic_minsky naughty_nightingale
heuristic_minsky
naughty_nightingale

## Section: 4

# 35. What's In An Image (and What Isn't)

https://github.com/moby/moby/blob/master/image/spec/v1.md

Docker Image Specification v1.0.0
An Image is an ordered collection of root filesystem changes and the corresponding execution parameters for use within a container runtime. 
This specification outlines the format of these filesystem changes and corresponding parameters and describes how to create and use them 
for use with a container runtime and execution tool.

# 36. The Mighty Hub: Using Docker Hub Registry Images

ubuntu@ip-172-31-27-210:~$ docker container ls
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
ubuntu@ip-172-31-27-210:~$ docker image ls
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
mongo               latest              c1d6c06b5775        4 days ago          381MB
nginx               1.15.3-alpine       994032453556        13 days ago         17.4MB
alpine              latest              196d12cf6ab1        13 days ago         4.41MB
ubuntu              14.04               c32fae490809        2 weeks ago         188MB
ubuntu              latest              cd6d8154f1e1        2 weeks ago         84.1MB
elasticsearch       2                   5e9d896dc62c        2 weeks ago         479MB
nginx               latest              06144b287844        2 weeks ago         109MB
mysql               latest              6a834f03bd02        2 weeks ago         484MB
httpd               latest              d595a4011ae3        2 weeks ago         178MB
centos              latest              5182e96772bf        7 weeks ago         200MB

docker pull nginx
docker pull nginx:1.11.9
docker pull nginx-alpine
or
docker pull nginx:1.15.3-alpine

docker image rm ubuntu:14.04

https://hub.docker.com/explore/
https://github.com/docker-library/official-images/tree/master/library

# 37. Images and Their Layers: Discover the image Cache

# union filesystem concept

docker history nginx:latest # history of the layers
docker history mysql:latest

docker image inspect nginx:latest # metadata of the image - 

https://docs.docker.com/storage/storagedriver/

# 38. Image Tagging and Pushing to Docker Hub

docker image tag --help
docker pull mysql/mysql-server
docker pull bretfisher/nodemongoapp

ubuntu@ip-172-31-27-210:~$ docker image push quackers101/nginx
The push refers to repository [docker.io/quackers101/nginx]
e8916cb59586: Preparing
3bbff39fa30b: Preparing
8b15606a9e3e: Preparing
denied: requested access to the resource is denied

 docker login
Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.
Username: quackers101
Password:
WARNING! Your password will be stored unencrypted in /home/ubuntu/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded

docker image push quackers101/nginx

docker image tag quackers101/nginx quackers101/nginx:testing
docker image push quackers101/nginx:testing

docker image rm quackers101/nginx:latest
docker image rm quackers101/nginx:testing

docker pull quackers101/nginx:latest
docker pull quackers101/nginx:testing

ubuntu@ip-172-31-27-210:~$ docker image ls
REPOSITORY                TAG                 IMAGE ID            CREATED             SIZE
nginx                     mainline            bc26f1ed35cf        3 hours ago         109MB
quackers101/nginx         latest              bc26f1ed35cf        3 hours ago         109MB
quackers101/nginx         testing             bc26f1ed35cf        3 hours ago         109MB
mongo                     latest              c1d6c06b5775        5 days ago          381MB
nginx                     1.15.3-alpine       994032453556        13 days ago         17.4MB
alpine                    latest              196d12cf6ab1        13 days ago         4.41MB
ubuntu                    latest              cd6d8154f1e1        2 weeks ago         84.1MB
elasticsearch             2                   5e9d896dc62c        2 weeks ago         479MB
nginx                     <none>              06144b287844        2 weeks ago         109MB
mysql                     latest              6a834f03bd02        2 weeks ago         484MB
httpd                     latest              d595a4011ae3        2 weeks ago         178MB
mysql/mysql-server        latest              1fdf3806e715        6 weeks ago         309MB
centos                    latest              5182e96772bf        7 weeks ago         200MB
bretfisher/nodemongoapp   <none>              ac0ee081b58e        18 months ago       673MB

# 39. Building Images: The Dockerfile Basics

https://docs.docker.com/engine/reference/builder/

# 40. Building Images: Running Docker Builds

docker image build -t customnginx .

# N.B. things that change the most should be placed at the bottom of the Docker File

# 41. Building Images: Extending Official Images

docker container run -p 80:80 --rm nginx # Standard nginx docker webserver

docker image build -t nginx-with-html .

ubuntu@ip-172-31-27-210:~/udemy-docker-mastery/dockerfile-sample-2$ docker container run -p 80:80 --rm nginx-with-html

# 42. Assignment: Build Your Own Dockerfile and Run Containers From It (Including 43. Assignment Answer)

ubuntu@ip-172-31-27-210:~$ cat udemy-docker-mastery/dockerfile-assignment-1/Dockerfile
# use this empty Dockerfile to build your assignment

# This dir contains a Node.js app, you need to get it running in a container
# No modifications to the app should be necessary, only edit this Dockerfile

# Overview of this assignment
# use the instructions from developer below to create a working Dockerfile
# feel free to add command inline below or use a new file, up to you (but must be named Dockerfile)
# once Dockerfile builds correctly, start container locally to make sure it works on http://localhost
# then ensure image is named properly for your Docker Hub account with a new repo name
# push to Docker Hub, then go to https://hub.docker.com and verify
# then remove local image from cache
# then start a new container from your Hub image, and watch how it auto downloads and runs
# test again that it works at http://localhost


# Instructions from the app developer
# - you should use the 'node' official image, with the alpine 6.x branch
FROM node:6-alpine
# - this app listens on port 3000, but the container should launch on port 80
  #  so it will respond to http://localhost:80 on your computer
EXPOSE 3000
# - then it should use alpine package manager to install tini: 'apk add --update tini'
RUN apk add --update tini
# - then it should create directory /usr/src/app for app files with 'mkdir -p /usr/src/app'
RUN mkdir -p /usr/src/app
# - Node uses a "package manager", so it needs to copy in package.json file
WORKDIR /usr/src/app
COPY package.json package.json
# - then it needs to run 'npm install' to install dependencies from that file
RUN npm install && npm cache clean
# - to keep it clean and small, run 'npm cache clean --force' after above
# - then it needs to copy in all files from current directory
COPY . .
# - then it needs to start container with command '/sbin/tini -- node ./bin/www'
CMD [ "tini", "--", "node", "./bin/www"  ]
# - in the end you should be using FROM, RUN, WORKDIR, COPY, EXPOSE, and CMD commands

# Bonus Extra Credit
# this will not have you setting up a complete image useful for local development, test, and prod
# it's just meant to get you started with basic Dockerfile concepts and not focus too much on
# proper Node.js use in a container. **If you happen to be a Node.js Developer**, then
# after you get through more of this course, you should come back and use my
# Node Docker Good Defaults sample project on GitHub to change this Dockerfile for
# better local development with more advanced topics
# https://github.com/BretFisher/node-docker-good-defaults

docker build -t testnode .
docker container run --rm -p 80:3000 testnode
or
docker container run -d -p 80:3000 testnode

docker tag testnode quackers101/testing-node
docker push quackers101/testing-node

docker image rm quackers101/testing-node
docker container run --rm -p 80:3000 testnode

## Section: 5

# 44. Container Lifetime & Persistant Data: Volumes, Volumes, Volumes

# Links to read up on (and to catch up) :

https://docs.docker.com/engine/reference/builder/
https://docs.docker.com/storage/storagedriver/

https://www.oreilly.com/ideas/an-introduction-to-immutable-infrastructure
https://12factor.net/
https://medium.com/@kelseyhightower/12-fractured-apps-1080c73d481c
https://docs.docker.com/storage/
https://github.com/Quackers71/DockerQUdemy/tree/master/All-Course-Slides

# 45. Persistant Data: Data Volumes

docker container run -d --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=True mysql

docker volume ls
docker volume inspect 582b89e94c21a15a7029850f11c4e42a8db905efb9777b9f22d8ed0b64e94595

docker container run -d --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=True -v mysql-db:/var/lib/mysql mysql
docker volume inspect mysql-db

docker container rm -f mysql
docker container ls
docker container run -d --name mysql2 -e MYSQL_ALLOW_EMPTY_PASSWORD=True -v mysql-db:/var/lib/mysql mysql
docker volume ls
docker container inspect mysql2

docker volume create --help

# 46. Persistant Data: Bind Mounting

cd udemy-docker-mastery/dockerfile-sample-2/
ubuntu@ip-172-31-27-210:~/udemy-docker-mastery/dockerfile-sample-2$ ls -la
total 20
drwxrwxr-x  2 ubuntu ubuntu 4096 Sep 27 20:15 .
drwxrwxr-x 30 ubuntu ubuntu 4096 Sep 22 13:19 ..
-rw-rw-r--  1 ubuntu ubuntu  414 Sep 22 13:19 Dockerfile
-rw-rw-r--  1 ubuntu ubuntu  249 Sep 22 13:19 index.html

docker container run -d --name nginx -p 80:80 -v $(pwd):/usr/share/nginx/html nginx # Bind Mounting the Working Directory $(pwd) to /usr/share/nginx/html within the Docker Container

docker container run -d --name nginx2 -p 8080:80 nginx
# from here
touch testme.txt
echo "is it me you're looking for....." > testme.txt

ubuntu@ip-172-31-27-210:~/udemy-docker-mastery/dockerfile-sample-2$ ls -la
total 20
drwxrwxr-x  2 ubuntu ubuntu 4096 Sep 27 20:15 .
drwxrwxr-x 30 ubuntu ubuntu 4096 Sep 22 13:19 ..
-rw-rw-r--  1 ubuntu ubuntu  414 Sep 22 13:19 Dockerfile
-rw-rw-r--  1 ubuntu ubuntu  249 Sep 22 13:19 index.html
-rw-rw-r--  1 ubuntu ubuntu   33 Sep 27 20:15 testme.txt

# back to nginx
docker container exec -ti nginx bash
cd /usr/share/nginx/html # which is the Bind Mounting 
ls -la
root@06a09514eac5:/# cd /usr/share/nginx/html/
root@06a09514eac5:/usr/share/nginx/html# ls -la
total 20
drwxrwxr-x 2 1000 1000 4096 Sep 27 20:15 .
drwxr-xr-x 3 root root 4096 Sep 25 17:21 ..
-rw-rw-r-- 1 1000 1000  414 Sep 22 13:19 Dockerfile
-rw-rw-r-- 1 1000 1000  249 Sep 22 13:19 index.html
-rw-rw-r-- 1 1000 1000   33 Sep 27 20:15 testme.txt

# 47. Assignment: Database Upgrades with Named Volumes

docker pull postgres:9.6
docker container run -d --name postgres -v postgres-db:/var/lib/postgresql/data postgres

docker container run -d --name psql -v psql:/var/lib/postgresql/data postgres:9.6
docker container logs -f psql
docker container stop psql

docker container run -d --name psql2 -v psql:/var/lib/postgresql/data postgres:9.6
docker container ps -a
docker volume ls
ubuntu@ip-172-31-27-210:~$ docker container logs psql2
LOG:  database system was shut down at 2018-09-27 22:43:02 UTC
LOG:  MultiXact member wraparound protections are now enabled
LOG:  database system is ready to accept connections
LOG:  autovacuum launcher started

# 49. Assignment: Edit Code Running in Containers With Bind Mounts

https://hub.docker.com/r/bretfisher/jekyll-serve/

docker run -p 80:4000 -v $(pwd):/site bretfisher/jekyll-serve

Bundle complete! 4 Gemfile dependencies, 29 gems now installed.
Bundled gems are installed into `/usr/local/bundle`
Configuration file: /site/_config.yml
       Deprecation: The 'gems' configuration option has been renamed to 'plugins'. Please update your config file accordingly.
            Source: /site
       Destination: /site/_site
 Incremental build: disabled. Enable with --incremental
      Generating...
       Jekyll Feed: Generating feed for posts
                    done in 0.459 seconds.
 Auto-regeneration: enabled for '/site'
    Server address: http://0.0.0.0:4000/
  Server running... press ctrl-c to stop.
      Regenerating: 1 file(s) changed at 2018-09-27 22:58:25
                    _posts/2017-03-05-welcome-to-jekyll.markdown
       Jekyll Feed: Generating feed for posts
                    ...done in 0.117480073 seconds.

ubuntu@ip-172-31-27-210:~/udemy-docker-mastery/bindmount-sample-1/_posts$ vim 2017-03-05-welcome-to-jekyll.markdown # made a change to this file and Jekyll appropiated this

## Section: 6 Making it Easier with Docker Compose: The Multi-Container Tool

# 51. Docker Compose and The docker-compose.yml File

docker-compose --help
docker-compose.yml
docker-compose -f

http://yaml.org/start.html
http://yaml.org/refcard.html
https://docs.docker.com/compose/compose-file/compose-versioning/
https://github.com/docker/compose/releases

https://docs.docker.com/compose/compose-file/

# 52. Trying Out Basic Compose Commands - docker-compose CLI

docker-compose up	# setup volumes/networks and start all containers
docker-compose down	# stop all containers and remove cont/vol/net

# could be as simple as :
git clone github.com/some/software
docker-compose up

ubuntu@ip-172-31-27-210:~/udemy-docker-mastery/compose-sample-2$ cat docker-compose.yml
version: '3'

services:
  proxy:
    image: nginx:1.13 # this will use the latest version of 1.13.x
    ports:
      - '80:80' # expose 80 on host and sent to 80 in container
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
  web:
    image: httpd  # this will use httpd:latest
ubuntu@ip-172-31-27-210:~/udemy-docker-mastery/compose-sample-2$ docker-compose up

# or use
docker-compose up -d
docker-compose logs

docker-compose ps
docker-compose top

ubuntu@ip-172-31-27-210:~/udemy-docker-mastery/compose-sample-2$ docker-compose down
Stopping compose-sample-2_web_1   ... done
Stopping compose-sample-2_proxy_1 ... done
Removing compose-sample-2_web_1   ... done
Removing compose-sample-2_proxy_1 ... done
Removing network compose-sample-2_default

# 53. Assignment: Build a Compose File For a Multi-Container Service

# 54. Assignment Answers: Build a Compose File For a Multi-Container Service

vim compose-compose.yml # from compose-assignment-2

version: '3'

  services:
    drupal:
      image: drupal
      ports:
        - "8080:80"
      volumes:
        - drupal-modules:/var/www/html/modules
        - drupal-profiles:/var/www/html/profiles
        - drupal-sites:/var/www/html/sites
        - drupal-themes:/var/www/html/themes
    postgres:
      image: postgres
      environment:
        - POSTGRES_PASSWORD=****

  volumes:
    drupal-modules:
    drupal-profiles:
    drupal-sites:
    drupal-themes:
	
# Now run :

docker-compose up

# MySite

http://18.130.235.246:8080/
http://18.130.235.246:8080/node/1
http://18.130.235.246:8080/node/2

# Madness - Drupal 8 - Bare mininum CMS

docker-compose up -d # to keep it running

# to remove all
docker-compose down -v # which will remove the volumes

ubuntu@ip-172-31-27-210:~/udemy-docker-mastery/compose-assignment-2$ docker container ls
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES
6948572d6dd6        postgres            "docker-entrypoint.s…"   18 minutes ago      Up 41 seconds       5432/tcp               compose-assignment-2_postgres_1
8992d5fe7569        drupal              "docker-php-entrypoi…"   18 minutes ago      Up 42 seconds       0.0.0.0:8080->80/tcp   compose-assignment-2_drupal_1
ubuntu@ip-172-31-27-210:~/udemy-docker-mastery/compose-assignment-2$ docker image ls
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
drupal              latest              d5860b9bd199        13 days ago         446MB
postgres            latest              084ec18124c8        2 weeks ago         228MB
ubuntu@ip-172-31-27-210:~/udemy-docker-mastery/compose-assignment-2$ docker volume ls
DRIVER              VOLUME NAME
local               6b7277cde2e63bb21fd2ad8e04427fc9ef50e32012d246428987a021e313f0b5
local               81cb52f4af8e52b072839d8f41797332dc0dc0baac74a37c7443717c0cda6022
local               compose-assignment-2_drupal-modules
local               compose-assignment-2_drupal-profiles
local               compose-assignment-2_drupal-sites
local               compose-assignment-2_drupal-themes
local               mysql-db
local               psql

# 55. Adding Image Building to Compose Files

# using the /compose-assignment-3 folder

docker-compose up

ubuntu@ip-172-31-27-210:~/udemy-docker-mastery/compose-sample-3$ docker-compose up
Creating network "compose-sample-3_default" with the default driver
Building proxy
Step 1/2 : FROM nginx:1.13
1.13: Pulling from library/nginx
f2aa67a397c4: Pull complete
3c091c23e29d: Pull complete
4a99993b8636: Pull complete
Digest: sha256:b1d09e9718890e6ebbbd2bc319ef1611559e30ce1b6f56b2e3b479d9da51dc35
Status: Downloaded newer image for nginx:1.13
 ---> ae513a47849c
Step 2/2 : COPY nginx.conf /etc/nginx/conf.d/default.conf
 ---> 9c81a5cd47f0
Successfully built 9c81a5cd47f0
Successfully tagged compose-sample-3_proxy:latest
WARNING: Image for service proxy was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.
Pulling web (httpd:)...
latest: Pulling from library/httpd
f189db1b88b3: Pull complete
ba2d31d4e2e7: Pull complete
23a65f5e3746: Pull complete
5e8eccbd4bc6: Pull complete
4c145eec18d8: Pull complete
c64fd93430a0: Pull complete
c9efc31823a2: Pull complete
Digest: sha256:81bc5f68f994a3c7bffc5d6ecba9e4fde70488c43ee8d57846a45c4995c67a23
Status: Downloaded newer image for httpd:latest
Creating compose-sample-3_web_1   ... done
Creating compose-sample-3_proxy_1 ... done
Attaching to compose-sample-3_web_1, compose-sample-3_proxy_1
web_1    | AH00558: httpd: Could not reliably determine the server's fully qualified domain name, using 172.22.0.3. Set the 'ServerName' directive globally to suppress this message
web_1    | AH00558: httpd: Could not reliably determine the server's fully qualified domain name, using 172.22.0.3. Set the 'ServerName' directive globally to suppress this message
web_1    | [Sat Sep 29 07:41:23.789863 2018] [mpm_event:notice] [pid 1:tid 140169184446336] AH00489: Apache/2.4.35 (Unix) configured -- resuming normal operations
web_1    | [Sat Sep 29 07:41:23.790304 2018] [core:notice] [pid 1:tid 140169184446336] AH00094: Command line: 'httpd -D FOREGROUND'

docker-compose down

# 56. / 57. Assignment Answer: Compose For Run-Time Image Building and Multi-Container Development

# Use https://codebeautify.org/yaml-validator#

version: '2'
services:
    drupal:
    image: "custom-drupal"
    build: .
    ports:
        - "8080:80"
volumes:
    - drupal-modules:/var/www/html/modules
    - drupal-profiles:/var/www/html/profiles
    - drupal-sites:/var/www/html/sites
    - drupal-themes:/var/www/html/themes
postgres:
    image: postgres:9.6
    environment:
      - POSTGRES_PASSWORD=****
    volumes:
      - drupal-data:/var/lib/postgresql/data

volumes:
    drupal-data:
    drupal-modules:
    drupal-profiles:
    drupal-sites:
    drupal-themes:




